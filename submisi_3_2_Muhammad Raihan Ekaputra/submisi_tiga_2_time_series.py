# -*- coding: utf-8 -*-
"""Submisi_Tiga_2_Time_Series.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vnekm2TIkPD18KC762mfxsLIGiwSjBNv

**Nama : Muhammad Raihan Ekaputra Idrisatria**

**Asal : Universitas Brawijaya**

Tahap pertama yang akan dilakukan adalah mengimport modul yang dibutuhkan
"""

import pandas as pd
from datetime import datetime
import plotly.graph_objects as go
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
import tensorflow as tf
from sklearn.preprocessing import StandardScaler

df=pd.read_csv("/content/drive/MyDrive/File Program MBKM/Submisi_Tiga_Muhammad_Raihan_Ekaputra/Submisi_Tiga_2_Time_Series/weatherHistory.csv",parse_dates=['Formatted Date'])
df

df.isnull().sum()

t=df['Formatted Date'].values
T=df['Temperature (C)'].values

t_train,t_test,T_train,T_test=train_test_split(t,T,test_size=0.2,random_state=0,shuffle=False)

plt.figure(figsize=(10,8))
plt.scatter(t,T)

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

train_set = windowed_dataset(T,window_size=60, batch_size=100, shuffle_buffer=1000)
test_set=windowed_dataset(T_test,window_size=60, batch_size=100, shuffle_buffer=1000)
model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(60, return_sequences=True),
  tf.keras.layers.LSTM(60,return_sequences=True),
  tf.keras.layers.Dense(30,activation='relu'),
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(30,activation='relu'),
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(1),
])

optimizer = tf.keras.optimizers.RMSprop(learning_rate=1.0000e-04, momentum=0.9)

my_callbacks = [
    tf.keras.callbacks.EarlyStopping(patience=2),
    tf.keras.callbacks.ModelCheckpoint(filepath='model.{epoch:02d}-{val_loss:.2f}.h5'),
    tf.keras.callbacks.TensorBoard(log_dir='./logs'),
]

model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])
history = model.fit(train_set,validation_data=test_set,epochs=50,steps_per_epoch=10,callbacks=[my_callbacks])

"""Menghitung skala data"""

skala_data=max(T)-min(T)
skala_data

(4.5/skala_data)*100

plt.figure(figsize=(10,8))
plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])

plt.figure(figsize=(10,8))
plt.plot(history.history['val_loss'])