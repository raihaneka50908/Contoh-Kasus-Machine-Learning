# -*- coding: utf-8 -*-
"""Submisi_Tiga_3_Klasifikasi_Masker_TF_Lite.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FvNZsZlBgTWUS5xJEVL9RvP80Z_lrQlU

**Nama : Muhammad Raihan Ekaputra Idrisatria**

**Asal : Universitas Brawijaya**
"""

import tensorflow as tf
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from google.colab import files
import os
from tensorflow.keras.callbacks import EarlyStopping

base_dir="/content/drive/MyDrive/File Program MBKM/Submisi_Tiga_Muhammad_Raihan_Ekaputra/Submisi_Tiga_3_Klasifikasi_Gambar_TF_Lite/dataset"

os.listdir(base_dir)

train_datagen = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=20,
                    horizontal_flip=True,
                    shear_range = 0.2,
                    fill_mode = 'nearest',
                    validation_split=0.2)

train_gen=train_datagen.flow_from_directory(base_dir,
                                            subset='training',
                                            class_mode='categorical',
                                            target_size=(150,150),
                                            shuffle=True)

validation_gen=train_datagen.flow_from_directory(base_dir,
                                            subset='validation',
                                            class_mode='categorical',
                                            target_size=(150,150),
                                            shuffle=True,)

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150,150,3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128,(3,3),activation='relu'),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(240, activation='relu'),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(240,activation='relu'),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(128,activation='relu'),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(64,activation='relu'),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(3,activation='softmax')
])

model.summary()

model.compile(loss='categorical_crossentropy',
              optimizer='Nadam',
              metrics=['accuracy'])

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('loss')<0.09) and (logs.get('val_loss')<0.09):
      self.model.stop_training = True

history=model.fit(
        train_gen,
        steps_per_epoch=15,  
        epochs=100, 
        validation_data=validation_gen, 
        validation_steps=5,
        verbose='auto',
        callbacks=myCallback())

plt.figure(figsize=(10,8))
plt.subplot(121)
plt.plot(history.history['val_accuracy'])
plt.plot(history.history['accuracy'])
plt.subplot(122)
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])

!pip install tensorflowjs

path_model='/content/Submisi_Tiga_Klasifikasi_Masker_TF_Lite/'
tf.saved_model.save(model,path_model)

!tensorflowjs_converter \
  --input_format=tf_saved_model \
  /content/Submisi_Tiga_Klasifikasi_Masker_TF_Lite \
  /content/modeltfjs